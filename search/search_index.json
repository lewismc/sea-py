{
    "docs": [
        {
            "location": "/",
            "text": "SEA-PY: Python Tools for Oceanographic Analysis\n\uf0c1\n\n\n\n    \n\n        \n\n        \nA collaborative effort to organize and distribute\n\n        Python tools for the Oceanographic Community\n\n        \n\n    \n\n\n\n\n\nA collaborative effort to organize Python tools for the Oceanographic Community\n\n\nThe bare minimum\n\uf0c1\n\n\n\n\nPython\n: Needs no introduction.\n\n\nIPython\n: An enhanced interactive Python shell.\n\n\nNumPy\n: Support for large, multi-dimensional arrays and matrices, along with a large library of high-level mathematical functions to operate on these arrays.\n\n\nSciPy\n: Library of algorithms and mathematical tools for the Python programming language.\n\n\nmatplotlib\n: 2D plotting library which produces publication quality figures in a variety of hardcopy formats and interactive environments.\n\n\n\n\nTime Series Tools\n\uf0c1\n\n\n\n\nUTide\n: UTide - A project (in its early development phase) to create a Python implementation of the Matlab-based UTide tidal analysis tools.\n\n\nttide\n: A direct conversion of T_Tide to Python.\n\n\npytides\n: Pytides is small Python package for the analysis and prediction of tides.\n\n\ntappy\n: Tidal analysis package.\n\n\ndateutil\n: Provides powerful extensions to the standard datetime module.\n\n\nPyWavelets\n: Wavelet transform module.\n\n\nwafo\n: Routines for statistical analysis and simulation of random waves and random loads.\n\n\npandas\n: Cross-section and time series data analysis toolkit\n\n\nCurrents\n: CODAS, Lowered ADCP\n\n\n\n\nNumerical Modeling Tools\n\uf0c1\n\n\n\n\noctant\n: Ocean C-grid model seTup and Analysis Toolkit. The toolkit contains general modeling tools for dealing with arrays, diagnosing standard properties, curvilinear grid generation, and interpolation. Specific tools are also included for ROMS and GETM.\n\n\npyroms\n: Collection of tools to help with input and output files from the Regional Ocean Modeling System (ROMS).\n\n\nPySeidon\n: Suite of tools for the tidal energy community and FVCOM users\n\n\nPyFVCOM\n: PyFVCOM is a collection of various tools and utilities which can be used to extract, analyse and plot input and output files from FVCOM.\n\n\nTracPy\n: Fortran core of Tracmass + Python wrapping around the outside.  TracPy is a toolbox for Lagrangian tracking on top of staggered C grid model output, and is currently set up to use directly with ROMS.\n\n\npygridgen\n: A Python interface to Pavel Sakov\u2019s C-based Gridgen Orthogonal Grid Generation Package.\n\n\nokean\n: Ocean modelling and analysis tools.\n\n\n\n\nMapping Tools\n\uf0c1\n\n\n\n\nbasemap\n: Matplotlib Basemap Toolkit.\n\n\ncartopy\n: A library providing cartographic tools for python.\n\n\nfolium\n: Python Data. Leaflet.js Maps.\n\n\nPySAL\n: Python Spatial Analysis Library.\n\n\nsci-wms\n: A Python WMS service for geospatial gridded data.\n\n\n\n\nHydrographic Tools\n\uf0c1\n\n\n\n\npython-ctd\n: Tools to load hydrographic data as pandas DataFrame with some handy methods for data pre-processing and analysis.\n\n\npython-seawater\n:  Python version of the CSIRO seawater toolbox (SEAWATER-3.3).\n\n\npython-gsw\n: A oceanographic toolbox of the International Thermodynamic Equation Of Seawater - 2010, (TEOS-10).\n\n\npygsw\n: C-wrapped alternative to python-gsw.\n\n\ncbsyst\n: Python module for calculating carbon and boron solution chem.\n\n\nnarwhal\n: Experimental tools to organize, analyze, and plot CTD data, including GSW wrappers.\n\n\n\n\nData Interface Tools\n\uf0c1\n\n\n\n\nnetcdf4-python\n: Python/numpy interface to netCDF\n\n\npython-blosc\n: Wrapper for the Blosc compressor.\n\n\nPyTables\n: Package for managing hierarchical datasets and designed to efficiently and easily cope with extremely large amounts of data.\n\n\nh5py\n: Interface to the HDF5 library.\n\n\npython-hdf4\n: Python-HDF4: Python interface to the NCSA HDF4 library.\n\n\nPyNIO/PyNGL\n: File input/output\n\n\nPydap\n: Library implementing the Data Access Protocol.\n\n\npygrib\n: python GRIB (editions 1 and 2) reader.\n\n\n\n\nPlotting (beyond matplotlib)\n\uf0c1\n\n\n\n\nmayavi\n: Scripting for 3D plotting.\n\n\ngnuplot-py\n: Package that interfaces to gnuplot, the popular open-source plotting program.\n\n\nPyNGL\n: Scientific visualization.\n\n\nggplot\n: ggplot is a plotting system for Python based on R\u2019s ggplot2 and the Grammar of Graphics. It is built for making professional looking, plots quickly with minimal code.\n\n\nbokeh\n: Bokeh is a Python interactive visualization library that targets modern web browsers for presentation.\n\n\nmpld3\n: The mpld3 project brings together Matplotlib, the popular Python-based graphing library, and D3js, the popular Javascript library for creating interactive data visualizations for the web.\n\n\n\n\nCDMs\n\uf0c1\n\n\n\n\npaegan\n: Processing and Analysis for Numerical Data.\n\n\nIris\n: A Python library for Meteorology and Climatology\n\n\n\n\nAtmosphere\n\uf0c1\n\n\n\n\natmqty\n: Methods to calculate atmospheric quantities (on the Earth) that are directly derivative (i.e. not requiring time integration or modeling) from standard state variables.\n\n\nairsea\n: Translation of the original AIR_SEA toolbox for Matlab.\n\n\n\n\nClimate\n\uf0c1\n\n\n\n\nPyClimate\n: Designed to accomplish some usual tasks needed during the analysis of climate variability. It provides functions to handle simple I/O operations, handling of COARDS-compliante netCDF files, EOF analysis, SVD and CCA analysis of coupled data sets, some linear digital filters, kernel based probability density function estimation and access to DCDFLIB.C library\n\n\nclimpy\n: climpy module.\n\n\nCDAT\n: Climate Data Analysis Tools.\n\n\nccc-gistemp\n: Reimplementation of GISTEMP in Python for clarity.\n\n\n\n\nStatistics\n\uf0c1\n\n\n\n\nstatsmodels\n: Statistical computations and models for use with SciPy.\n\n\nscikit.learn\n: Module integrating classic machine learning algorithms in the tightly-knit world of scientific Python packages.\n\n\nRPy\n: Interface to the R Programming Language.\n\n\npymc\n: Markov chain Monte Carlo for Python\n\n\n\n\nMiscellaneous Other Tools\n\uf0c1\n\n\n\n\noceans\n: Misc functions for oceanographic data analysis.\n\n\nOWSLib\n: OWSLib is a Python package for client programming with Open Geospatial Consortium (OGC) web service (hence OWS) interface standards, and their related content models.\n\n\npyoos\n: A Python library for collecting Met/Ocean observations.\n\n\nscitools\n: Contains many useful tools for scientific computing in Python. The package is built on top of other widely used packages such as NumPy, SciPy, ScientificPython, Matplotlib, Gnuplot, etc.\n\n\nuncertainties\n: Transparent calculations with uncertainties on the quantities involved (aka \u201cerror propagation\u201d) ; fast calculation of derivatives.\n\n\nnumexpr\n: Fast numerical array expression evaluator for Python and NumPy.\n\n\nBottleneck\n: Fast NumPy array functions written in Cython.\n\n\nspyderlib\n: Spyder is the Scientific PYthon Development EnviRonment.\n\n\nSciPy scikits\n: Scipy Toolkits are independent and separately installable projects hosted under a common namespace. Packages that are distributed in this way are here (instead of in monolithic scipy) for at least one of three general reasons. Each of these reasons use the same high-level namespace (scikits).\n\n\nfwrap\n: Wraps FORTRAN code.\n\n\ngmpy\n: A C-coded Python extension module that wraps the GMP library to provide to Python code fast multiprecision arithmetic (integer, rational, and float), random number generation, advanced number-theoretical functions, and more.\n\n\nSymPy\n: Library for symbolic mathematics.\n\n\nPyEphem\n: Scientific-grade astronomical computations.\n\n\nAstropysics\n: Astrophysics utilities.\n\n\nbiopython\n: Tools for biological computation written in Python.\n\n\npytroll\n: Python modules for the reading, interpretation, and writing of weather satellite data.\n\n\nTopical Software\n: SciPy Topical Software.\n\n\npyferret\n: Ferret is an interactive computer visualization and analysis environment designed to meet the needs of oceanographers and meteorologists.\n\n\nopenptv\n: OpenPTV is an open source particle tracking velocimetry consortium providing software and assistance with the 3D-PTV experiments, including the field deployments for oceanographers, limnologists and meteorologits.\n\n\n\n\nFun\n\uf0c1\n\n\n\n\nslocum\n: A tool for ocean passage planning.\n\n\nOceanSound\n: Get the music from oceancolor images, through MODIS satellite.",
            "title": "Home"
        },
        {
            "location": "/#sea-py-python-tools-for-oceanographic-analysis",
            "text": "",
            "title": "SEA-PY: Python Tools for Oceanographic Analysis"
        },
        {
            "location": "/#the-bare-minimum",
            "text": "Python : Needs no introduction.  IPython : An enhanced interactive Python shell.  NumPy : Support for large, multi-dimensional arrays and matrices, along with a large library of high-level mathematical functions to operate on these arrays.  SciPy : Library of algorithms and mathematical tools for the Python programming language.  matplotlib : 2D plotting library which produces publication quality figures in a variety of hardcopy formats and interactive environments.",
            "title": "The bare minimum"
        },
        {
            "location": "/#time-series-tools",
            "text": "UTide : UTide - A project (in its early development phase) to create a Python implementation of the Matlab-based UTide tidal analysis tools.  ttide : A direct conversion of T_Tide to Python.  pytides : Pytides is small Python package for the analysis and prediction of tides.  tappy : Tidal analysis package.  dateutil : Provides powerful extensions to the standard datetime module.  PyWavelets : Wavelet transform module.  wafo : Routines for statistical analysis and simulation of random waves and random loads.  pandas : Cross-section and time series data analysis toolkit  Currents : CODAS, Lowered ADCP",
            "title": "Time Series Tools"
        },
        {
            "location": "/#numerical-modeling-tools",
            "text": "octant : Ocean C-grid model seTup and Analysis Toolkit. The toolkit contains general modeling tools for dealing with arrays, diagnosing standard properties, curvilinear grid generation, and interpolation. Specific tools are also included for ROMS and GETM.  pyroms : Collection of tools to help with input and output files from the Regional Ocean Modeling System (ROMS).  PySeidon : Suite of tools for the tidal energy community and FVCOM users  PyFVCOM : PyFVCOM is a collection of various tools and utilities which can be used to extract, analyse and plot input and output files from FVCOM.  TracPy : Fortran core of Tracmass + Python wrapping around the outside.  TracPy is a toolbox for Lagrangian tracking on top of staggered C grid model output, and is currently set up to use directly with ROMS.  pygridgen : A Python interface to Pavel Sakov\u2019s C-based Gridgen Orthogonal Grid Generation Package.  okean : Ocean modelling and analysis tools.",
            "title": "Numerical Modeling Tools"
        },
        {
            "location": "/#mapping-tools",
            "text": "basemap : Matplotlib Basemap Toolkit.  cartopy : A library providing cartographic tools for python.  folium : Python Data. Leaflet.js Maps.  PySAL : Python Spatial Analysis Library.  sci-wms : A Python WMS service for geospatial gridded data.",
            "title": "Mapping Tools"
        },
        {
            "location": "/#hydrographic-tools",
            "text": "python-ctd : Tools to load hydrographic data as pandas DataFrame with some handy methods for data pre-processing and analysis.  python-seawater :  Python version of the CSIRO seawater toolbox (SEAWATER-3.3).  python-gsw : A oceanographic toolbox of the International Thermodynamic Equation Of Seawater - 2010, (TEOS-10).  pygsw : C-wrapped alternative to python-gsw.  cbsyst : Python module for calculating carbon and boron solution chem.  narwhal : Experimental tools to organize, analyze, and plot CTD data, including GSW wrappers.",
            "title": "Hydrographic Tools"
        },
        {
            "location": "/#data-interface-tools",
            "text": "netcdf4-python : Python/numpy interface to netCDF  python-blosc : Wrapper for the Blosc compressor.  PyTables : Package for managing hierarchical datasets and designed to efficiently and easily cope with extremely large amounts of data.  h5py : Interface to the HDF5 library.  python-hdf4 : Python-HDF4: Python interface to the NCSA HDF4 library.  PyNIO/PyNGL : File input/output  Pydap : Library implementing the Data Access Protocol.  pygrib : python GRIB (editions 1 and 2) reader.",
            "title": "Data Interface Tools"
        },
        {
            "location": "/#plotting-beyond-matplotlib",
            "text": "mayavi : Scripting for 3D plotting.  gnuplot-py : Package that interfaces to gnuplot, the popular open-source plotting program.  PyNGL : Scientific visualization.  ggplot : ggplot is a plotting system for Python based on R\u2019s ggplot2 and the Grammar of Graphics. It is built for making professional looking, plots quickly with minimal code.  bokeh : Bokeh is a Python interactive visualization library that targets modern web browsers for presentation.  mpld3 : The mpld3 project brings together Matplotlib, the popular Python-based graphing library, and D3js, the popular Javascript library for creating interactive data visualizations for the web.",
            "title": "Plotting (beyond matplotlib)"
        },
        {
            "location": "/#cdms",
            "text": "paegan : Processing and Analysis for Numerical Data.  Iris : A Python library for Meteorology and Climatology",
            "title": "CDMs"
        },
        {
            "location": "/#atmosphere",
            "text": "atmqty : Methods to calculate atmospheric quantities (on the Earth) that are directly derivative (i.e. not requiring time integration or modeling) from standard state variables.  airsea : Translation of the original AIR_SEA toolbox for Matlab.",
            "title": "Atmosphere"
        },
        {
            "location": "/#climate",
            "text": "PyClimate : Designed to accomplish some usual tasks needed during the analysis of climate variability. It provides functions to handle simple I/O operations, handling of COARDS-compliante netCDF files, EOF analysis, SVD and CCA analysis of coupled data sets, some linear digital filters, kernel based probability density function estimation and access to DCDFLIB.C library  climpy : climpy module.  CDAT : Climate Data Analysis Tools.  ccc-gistemp : Reimplementation of GISTEMP in Python for clarity.",
            "title": "Climate"
        },
        {
            "location": "/#statistics",
            "text": "statsmodels : Statistical computations and models for use with SciPy.  scikit.learn : Module integrating classic machine learning algorithms in the tightly-knit world of scientific Python packages.  RPy : Interface to the R Programming Language.  pymc : Markov chain Monte Carlo for Python",
            "title": "Statistics"
        },
        {
            "location": "/#miscellaneous-other-tools",
            "text": "oceans : Misc functions for oceanographic data analysis.  OWSLib : OWSLib is a Python package for client programming with Open Geospatial Consortium (OGC) web service (hence OWS) interface standards, and their related content models.  pyoos : A Python library for collecting Met/Ocean observations.  scitools : Contains many useful tools for scientific computing in Python. The package is built on top of other widely used packages such as NumPy, SciPy, ScientificPython, Matplotlib, Gnuplot, etc.  uncertainties : Transparent calculations with uncertainties on the quantities involved (aka \u201cerror propagation\u201d) ; fast calculation of derivatives.  numexpr : Fast numerical array expression evaluator for Python and NumPy.  Bottleneck : Fast NumPy array functions written in Cython.  spyderlib : Spyder is the Scientific PYthon Development EnviRonment.  SciPy scikits : Scipy Toolkits are independent and separately installable projects hosted under a common namespace. Packages that are distributed in this way are here (instead of in monolithic scipy) for at least one of three general reasons. Each of these reasons use the same high-level namespace (scikits).  fwrap : Wraps FORTRAN code.  gmpy : A C-coded Python extension module that wraps the GMP library to provide to Python code fast multiprecision arithmetic (integer, rational, and float), random number generation, advanced number-theoretical functions, and more.  SymPy : Library for symbolic mathematics.  PyEphem : Scientific-grade astronomical computations.  Astropysics : Astrophysics utilities.  biopython : Tools for biological computation written in Python.  pytroll : Python modules for the reading, interpretation, and writing of weather satellite data.  Topical Software : SciPy Topical Software.  pyferret : Ferret is an interactive computer visualization and analysis environment designed to meet the needs of oceanographers and meteorologists.  openptv : OpenPTV is an open source particle tracking velocimetry consortium providing software and assistance with the 3D-PTV experiments, including the field deployments for oceanographers, limnologists and meteorologits.",
            "title": "Miscellaneous Other Tools"
        },
        {
            "location": "/#fun",
            "text": "slocum : A tool for ocean passage planning.  OceanSound : Get the music from oceancolor images, through MODIS satellite.",
            "title": "Fun"
        },
        {
            "location": "/webresources/",
            "text": "Web resources\n\uf0c1\n\n\n\n    \n\n        \n\n        \nA collaborative effort to organize and distribute\n\n        Python tools for the Oceanographic Community\n\n        \n\n    \n\n\n\n\n\n\n\npython4oceanographers\n\n\nPyAOS\n\n\nearthpy\n\n\npyhogs\n\n\noceanpython\n\n\nNumPy for Matlab Users\n\n\nmatplotlib gallery\n\n\nSoftware Carpentry",
            "title": "Web resources"
        },
        {
            "location": "/webresources/#web-resources",
            "text": "",
            "title": "Web resources"
        },
        {
            "location": "/about/",
            "text": "About\n\uf0c1\n\n\n\n    \n\n        \n\n        \nA collaborative effort to organize and distribute\n\n        Python tools for the Oceanographic Community\n\n        \n\n    \n\n\n\n\n\nsea-py is intended to be an equivalent of\n\nsea-mat\n.\n\n\nContributing\n\uf0c1\n\n\nIf you would liked to contribute to maintain this list up-to-date and/or adding\nsome new items you can fork the\n\nrepository\n and edit\nthe pages files in the\n\nsrc\n directory.  They are\njust simple Markdown files.  If you are not GitHub savvy, just open issues with\ncorrections and/or requests of what you would like to see here.\n\n\nLogo\n\uf0c1\n\n\nThe images at the top were inspired by\n\nsea-mat\u2019s\n header images,\nbut instead of showing Gulf of Maine and a random time-series they show the\nVit\u00f3ria-Trindade Seamount chain and a fake Semi-diurnal tide.  The images were\ncreated using \nmatplotlib\n\nand \ncartopy\n.\n\nHere\n is the code, enjoy:\n\n\nimport matplotlib\nimport numpy as np\nimport cartopy.crs as ccrs\nimport matplotlib.pyplot as plt\n\nmatplotlib.style.use('ggplot')\n\n\ndef make_map(projection=ccrs.PlateCarree(),\n             extent=[-43.5, -32.5, -24.5, -14.5]):\n    subplot_kw = dict(projection=projection)\n    fig, ax = plt.subplots(figsize=(3.25, 3.25), subplot_kw=subplot_kw)\n    ax.set_extent(extent)\n    return fig, ax\n\n\ndef fake_tide(t, M2amp, M2phase, S2amp, S2phase, randamp):\n    \"\"\"\n    Generate a minimally realistic-looking fake semidiurnal tide.\n\n    t is time in hours\n    phases are in radians\n    \"\"\"\n    out = M2amp * np.sin(2 * np.pi * t / 12.42 - M2phase)\n    out += S2amp * np.sin(2 * np.pi * t / 12.0 - S2phase)\n    out += randamp * np.random.randn(len(t))\n    return out\n\n\nif __name__ == '__main__':\n    # Map.\n    layer = 'BlueMarble_ShadedRelief_Bathymetry'\n    url = 'http://map1c.vis.earthdata.nasa.gov/wmts-geo/wmts.cgi'\n\n    fig, ax = make_map()\n    ax.add_wmts(url, layer)\n    ax.axis('off')\n\n    fig.savefig('map.png', format='png', dpi=72, orientation='portrait',\n                transparent=True)\n\n    # Time-series.\n    t = np.arange(500)\n    u = fake_tide(t, 2.2, 0.3, 1, .3, 0.4)\n    v = fake_tide(t, 1.1, 0.3 + np.pi / 2, 0.6, 0.3 + np.pi / 2, 0.4)\n\n    fig, ax = plt.subplots(figsize=(3.25, 3.25))\n    legendkw = dict(loc='lower right', fancybox=True, fontsize='small')\n\n    kw = dict(alpha=0.5, linewidth=2.5)\n    ax.plot(t, u, label='U', color='cornflowerblue', **kw)\n    ax.plot(t, v, label='V', color='lightsalmon', **kw)\n    ax.axis([200, 500, -8, 8])\n\n    # Keep the y tick labels from getting too crowded.\n    ax.locator_params(axis='y', nbins=5)\n    ax.axis('off')\n\n    fig.savefig('timeSeries.png', format='png', dpi=72, orientation='portrait',\n                transparent=True)",
            "title": "About"
        },
        {
            "location": "/about/#about",
            "text": "",
            "title": "About"
        },
        {
            "location": "/about/#contributing",
            "text": "If you would liked to contribute to maintain this list up-to-date and/or adding\nsome new items you can fork the repository  and edit\nthe pages files in the src  directory.  They are\njust simple Markdown files.  If you are not GitHub savvy, just open issues with\ncorrections and/or requests of what you would like to see here.",
            "title": "Contributing"
        },
        {
            "location": "/about/#logo",
            "text": "The images at the top were inspired by sea-mat\u2019s  header images,\nbut instead of showing Gulf of Maine and a random time-series they show the\nVit\u00f3ria-Trindade Seamount chain and a fake Semi-diurnal tide.  The images were\ncreated using  matplotlib \nand  cartopy . Here  is the code, enjoy:  import matplotlib\nimport numpy as np\nimport cartopy.crs as ccrs\nimport matplotlib.pyplot as plt\n\nmatplotlib.style.use('ggplot')\n\n\ndef make_map(projection=ccrs.PlateCarree(),\n             extent=[-43.5, -32.5, -24.5, -14.5]):\n    subplot_kw = dict(projection=projection)\n    fig, ax = plt.subplots(figsize=(3.25, 3.25), subplot_kw=subplot_kw)\n    ax.set_extent(extent)\n    return fig, ax\n\n\ndef fake_tide(t, M2amp, M2phase, S2amp, S2phase, randamp):\n    \"\"\"\n    Generate a minimally realistic-looking fake semidiurnal tide.\n\n    t is time in hours\n    phases are in radians\n    \"\"\"\n    out = M2amp * np.sin(2 * np.pi * t / 12.42 - M2phase)\n    out += S2amp * np.sin(2 * np.pi * t / 12.0 - S2phase)\n    out += randamp * np.random.randn(len(t))\n    return out\n\n\nif __name__ == '__main__':\n    # Map.\n    layer = 'BlueMarble_ShadedRelief_Bathymetry'\n    url = 'http://map1c.vis.earthdata.nasa.gov/wmts-geo/wmts.cgi'\n\n    fig, ax = make_map()\n    ax.add_wmts(url, layer)\n    ax.axis('off')\n\n    fig.savefig('map.png', format='png', dpi=72, orientation='portrait',\n                transparent=True)\n\n    # Time-series.\n    t = np.arange(500)\n    u = fake_tide(t, 2.2, 0.3, 1, .3, 0.4)\n    v = fake_tide(t, 1.1, 0.3 + np.pi / 2, 0.6, 0.3 + np.pi / 2, 0.4)\n\n    fig, ax = plt.subplots(figsize=(3.25, 3.25))\n    legendkw = dict(loc='lower right', fancybox=True, fontsize='small')\n\n    kw = dict(alpha=0.5, linewidth=2.5)\n    ax.plot(t, u, label='U', color='cornflowerblue', **kw)\n    ax.plot(t, v, label='V', color='lightsalmon', **kw)\n    ax.axis([200, 500, -8, 8])\n\n    # Keep the y tick labels from getting too crowded.\n    ax.locator_params(axis='y', nbins=5)\n    ax.axis('off')\n\n    fig.savefig('timeSeries.png', format='png', dpi=72, orientation='portrait',\n                transparent=True)",
            "title": "Logo"
        }
    ]
}